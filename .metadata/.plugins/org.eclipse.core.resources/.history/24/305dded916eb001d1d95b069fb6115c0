package dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import model.Customer;
import utils.JDBCUtil;

public class CustomerDAO implements InterfaceDAO<Customer> {
	
	@Override
	public ArrayList<Customer> selectAll() {
		ArrayList<Customer> listCustomer = new ArrayList<Customer>();
		Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/mytechstore","root","");
		String sql = "SELECT * FROM customer";
		try {
			PreparedStatement ps = conn.prepareStatement(sql);
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				String customerId = rs.getString("customer_id");
				String username = rs.getString("username");
				String password = rs.getString("password");
				String fullName = rs.getString("fullname");
				String gender = rs.getString("gender");
				Date dateOfBirth = rs.getDate("data_of_birth");
				String address = rs.getString("address");
				String shippingAddress = rs.getString("shipping_address");
				String phoneNumber = rs.getString("phone_number");
				String email = rs.getString("email");
				int receiveNotification = rs.getInt("receive_notification");
				Customer customer = new Customer(customerId, username, password, fullName, gender, dateOfBirth, address,
						shippingAddress, phoneNumber, email, receiveNotification);
				listCustomer.add(customer);
				JDBCUtil.closeConnection(conn);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return listCustomer;
	}

	@Override
	public Customer selectById(Customer t) {
		Customer customer = null;
		Connection conn = JDBCUtil.getConnection();
		String sql = "SELECT * FROM customer WHERE customer_id=?";
		try {
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.setString(1, t.getCustomerId());
			ResultSet rs = ps.executeQuery();
			while (rs.next()) {
				String customerId = rs.getString("customer_id");
				String username = rs.getString("username");
				String password = rs.getString("password");
				String fullName = rs.getString("fullname");
				String gender = rs.getString("gender");
				Date dateOfBirth = rs.getDate("data_of_birth");
				String address = rs.getString("address");
				String shippingAddress = rs.getString("shipping_address");
				String phoneNumber = rs.getString("phone_number");
				String email = rs.getString("email");
				int receiveNotification = rs.getInt("receive_notification");
				customer = new Customer(customerId, username, password, fullName, gender, dateOfBirth, address,
						shippingAddress, phoneNumber, email, receiveNotification);
				JDBCUtil.closeConnection(conn);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return customer;
	}

	public boolean checkExistUsername(String username) {
		try (Connection conn = JDBCUtil.getConnection()) {
			if (conn != null) {
				String sql = "SELECT * FROM customer WHERE username=?";
				PreparedStatement ps = conn.prepareStatement(sql);
				ps.setString(1, username);
				ResultSet rs = ps.executeQuery();
				while (rs.next()) {
					return true;
				}
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public int insert(Customer t) {
		int result = 0;
		try (Connection conn = JDBCUtil.getConnection()) {
			System.out.println(conn);
			String sql = "INSERT INTO customer(customer_id,username,password,email) VALUES(?,?,?,?)";
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.setString(1, t.getCustomerId());
			ps.setString(2, t.getUsername());
			ps.setString(3, t.getPassword());
			ps.setString(4, t.getEmail());
			result = ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}

	@Override
	public int insertAll(ArrayList<Customer> arrT) {
		int result = 0;
		for (Customer customer : arrT) {
			result += this.insert(customer);
		}
		return result;
	}

	@Override
	public int delete(Customer t) {
		int result = 0;
		Connection conn = JDBCUtil.getConnection();
		String sql = "DELETE FROM customer WHERE customer_id=?";
		try {
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.setString(0, t.getCustomerId());
			result = ps.executeUpdate();

			JDBCUtil.closeConnection(conn);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}

	@Override
	public int deleteAll(ArrayList<Customer> arrT) {
		int result = 0;
		for (Customer customer : arrT) {
			result+=this.delete(customer);
		}
		return result;
	}

	@Override
	public int update(Customer t) {
		int result = 0;
		Connection conn = JDBCUtil.getConnection();
		String sql = "UPDATE customer SET username=?,password=?, fullname=?, gender=?, date_of_birth=?, address=?, shipping_address=?,"
				+ "phone_number=?,email=?,receive_notification=?" + "WHERE customer_id,=?";
		try {
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.setString(1, t.getUsername());
			ps.setString(2, t.getPassword());
			ps.setString(3, t.getFullName());
			ps.setString(4, t.getGender());
			ps.setDate(5, t.getDateOfBirth());
			ps.setString(6, t.getAddress());
			ps.setString(7, t.getShippingAddress());
			ps.setString(8, t.getPhoneNumber());
			ps.setString(9, t.getEmail());
			ps.setInt(10, t.isReceiveNotification());
			ps.setString(11, t.getCustomerId());
			 result = ps.executeUpdate();
			
			JDBCUtil.closeConnection(conn);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}
}
